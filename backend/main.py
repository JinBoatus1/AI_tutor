from fastapi import FastAPIfrom fastapi.middleware.cors import CORSMiddlewarefrom pydantic import BaseModelfrom typing import List, Dictimport openaiimport osfrom dotenv import load_dotenv# Load env variablesload_dotenv()app = FastAPI()# Configure CORS middlewareapp.add_middleware(    CORSMiddleware,    allow_origins=["*"],    allow_credentials=True,    allow_methods=["*"],    allow_headers=["*"],)class ChatMessage(BaseModel):    message: str    history: List[Dict[str, str]] = []@app.get("/")async def root():    return {"message": "MathCup AI Tutor Backend is running!", "status": "healthy"}@app.post("/api/chat")async def chat(chat_message: ChatMessage):    try:        # Check if API key is configured        api_key = os.getenv("API_KEY")        if not api_key:            return {"reply": "OpenAI API key not configured. Please add API_KEY to your .env file."}        # Initialize OpenAI client        client = openai.OpenAI(api_key=api_key)        system_prompt = """You are an AI math tutor using the Socratic teaching method. Your goals are:                1. NEVER give direct answers - instead guide students to discover solutions themselves        2. Ask probing questions to help students understand underlying concepts        3. Provide hints and step-by-step guidance when students get stuck        4. Encourage students to explain their reasoning and thought process        5. Break down complex problems into manageable smaller steps        6. Use encouraging and supportive language        7. When students make mistakes, guide them to recognize and correct errors themselves        8. Connect new concepts to previously learned material when possible                Response guidelines:        - Keep responses concise (2-3 sentences max)        - Always end with a guiding question or suggestion for next steps        - Use encouraging phrases like "Great start!", "You're on the right track!", "What do you think happens next?"        - If a student seems completely lost, provide a small hint and ask them to try again        - For complex problems, focus on just the immediate next step                Remember: Your job is to be a guide, not to solve problems for students."""        # Build conversation message list        messages = [            {"role": "system", "content": system_prompt}        ]        # Add conversation history        for msg in chat_message.history:            if "role" in msg and "content" in msg:                messages.append({                    "role": msg["role"],                    "content": msg["content"]                })        # Add user msg        messages.append({            "role": "user",            "content": chat_message.message        })        # Call OpenAI API        response = client.chat.completions.create(            model="gpt-4o-mini",            messages=messages,            max_tokens=300,            temperature=0.7        )        ai_reply = response.choices[0].message.content.strip()        return {"reply": ai_reply}    except Exception as e:        # Fallback response if API call fails        print(f"OpenAI API error: {e}")        return {"reply": "I'm having trouble connecting to my AI brain right now. Could you try asking your question again? ðŸ¤”"}if __name__ == "__main__":    import uvicorn    uvicorn.run(app, host="0.0.0.0", port=8000)